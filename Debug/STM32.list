
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08000e5c  08000e5c  00001e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ec8  08000ec8  0000200c  2**0
                  CONTENTS
  4 .ARM          00000008  08000ec8  08000ec8  00001ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ed0  08000ed0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed0  08000ed0  00001ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ed4  08000ed4  00001ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000ed8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08000ee4  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000ee4  00002094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028eb  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ae9  00000000  00000000  00004927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  00005410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a0  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148e0  00000000  00000000  00005a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d0e  00000000  00000000  0001a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082399  00000000  00000000  0001e03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a03d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d8c  00000000  00000000  000a041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000a11a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e44 	.word	0x08000e44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000e44 	.word	0x08000e44

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <LedInit>:
#include "main.h"
#include <string.h>
#define GPIOD_BASE_ADDR  0x40020C00
int cnt = 1000;
void LedInit()
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <LedInit+0x4c>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <LedInit+0x4c>)
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000234 <LedInit+0x4c>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <LedInit+0x50>)
 800020c:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0xff << 24);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 24)| (0b01 << 26)|(0b01 << 28)|(0b01 << 30);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020c00 	.word	0x40020c00

0800023c <ButtonInit>:
#define GPIOA_BASE_ADDR  0x40020000

void ButtonInit()
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	2300      	movs	r3, #0
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <ButtonInit+0x40>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <ButtonInit+0x40>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6313      	str	r3, [r2, #48]	@ 0x30
 8000252:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <ButtonInit+0x40>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <ButtonInit+0x44>)
 8000260:	607b      	str	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11 << 0);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 0203 	bic.w	r2, r3, #3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020000 	.word	0x40020000

08000284 <LedCtrl>:
	LED_RED,
	LED_BLUE
}LED_t;

void LedCtrl(LED_t led, int on_off)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	6039      	str	r1, [r7, #0]
 800028e:	71fb      	strb	r3, [r7, #7]
	else
	{
		*GPIOD_ODR &= ~(1<<led);
	}
#else
	uint32_t* GPIOD_BSRR = (uint32_t*)(GPIOD_BASE_ADDR + 0x18);
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <LedCtrl+0x4c>)
 8000292:	60fb      	str	r3, [r7, #12]
	if(on_off == 1)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d109      	bne.n	80002ae <LedCtrl+0x2a>
	{
		*GPIOD_BSRR |= (1<<led);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	431a      	orrs	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	601a      	str	r2, [r3, #0]
	else
	{
		*GPIOD_BSRR |= (1<<(led+16));
	}
#endif
}
 80002ac:	e009      	b.n	80002c2 <LedCtrl+0x3e>
		*GPIOD_BSRR |= (1<<(led+16));
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	3210      	adds	r2, #16
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	431a      	orrs	r2, r3
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40020c18 	.word	0x40020c18

080002d4 <ButtonState>:

char ButtonState()
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
	uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <ButtonState+0x24>)
 80002dc:	607b      	str	r3, [r7, #4]
	return (*GPIOA_IDR >> 0) & 1;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	b2db      	uxtb	r3, r3
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020010 	.word	0x40020010

080002fc <function>:

void function()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	if(ButtonState())
 8000300:	f7ff ffe8 	bl	80002d4 <ButtonState>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d004      	beq.n	8000314 <function+0x18>
		LedCtrl(LED_RED, 1);
 800030a:	2101      	movs	r1, #1
 800030c:	200e      	movs	r0, #14
 800030e:	f7ff ffb9 	bl	8000284 <LedCtrl>
	else
		LedCtrl(LED_RED, 0);
}
 8000312:	e003      	b.n	800031c <function+0x20>
		LedCtrl(LED_RED, 0);
 8000314:	2100      	movs	r1, #0
 8000316:	200e      	movs	r0, #14
 8000318:	f7ff ffb4 	bl	8000284 <LedCtrl>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <EXTI0Init>:

#define EXTI_BASE_ADDR	0x40013C00
void EXTI0Init()
{
 8000320:	b480      	push	{r7}
 8000322:	b08b      	sub	sp, #44	@ 0x2c
 8000324:	af00      	add	r7, sp, #0
			+ set trong thanh ghi EXTI_IMR
	- ARM (NVIC) phải chấp nhận interrupt signal từ EXTI gửi lên?
		+ bước 1: xác định EXTI0 nằm ở position bao nhiêu trong vector table? (mở vector table ở chapter "10: interrupts and events" trong reference manual) --> 6
		+ bước 2: enable interrupt cho position 6
	*/
	uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 8000326:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <EXTI0Init+0x98>)
 8000328:	623b      	str	r3, [r7, #32]
	*EXTI_RTSR |= (1<<0);
 800032a:	6a3b      	ldr	r3, [r7, #32]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f043 0201 	orr.w	r2, r3, #1
 8000332:	6a3b      	ldr	r3, [r7, #32]
 8000334:	601a      	str	r2, [r3, #0]
	uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
 8000336:	4b21      	ldr	r3, [pc, #132]	@ (80003bc <EXTI0Init+0x9c>)
 8000338:	61fb      	str	r3, [r7, #28]
	*EXTI_FTSR |= (1<<0);
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0201 	orr.w	r2, r3, #1
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	601a      	str	r2, [r3, #0]
	uint32_t* EXTI_IMR = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
 8000346:	4b1e      	ldr	r3, [pc, #120]	@ (80003c0 <EXTI0Init+0xa0>)
 8000348:	61bb      	str	r3, [r7, #24]
	*EXTI_IMR |= (1<<0);
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f043 0201 	orr.w	r2, r3, #1
 8000352:	69bb      	ldr	r3, [r7, #24]
 8000354:	601a      	str	r2, [r3, #0]

	uint32_t* NVIC_ISER0 = (uint32_t*)0xE000E100;
 8000356:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <EXTI0Init+0xa4>)
 8000358:	617b      	str	r3, [r7, #20]
	*NVIC_ISER0 |= 1<<6;
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	601a      	str	r2, [r3, #0]

	// Move vector table lên RAM (0x20000000)
	uint8_t* src = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
	uint8_t* dis = (uint8_t*)0x20000000;
 800036a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800036e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 0x198; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	627b      	str	r3, [r7, #36]	@ 0x24
 8000374:	e00a      	b.n	800038c <EXTI0Init+0x6c>
	{
		//dis[i] = src[i];
		*(dis+i) = *(src+i);
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	693a      	ldr	r2, [r7, #16]
 800037a:	441a      	add	r2, r3
 800037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800037e:	68f9      	ldr	r1, [r7, #12]
 8000380:	440b      	add	r3, r1
 8000382:	7812      	ldrb	r2, [r2, #0]
 8000384:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 0x198; i++)
 8000386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000388:	3301      	adds	r3, #1
 800038a:	627b      	str	r3, [r7, #36]	@ 0x24
 800038c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800038e:	f5b3 7fcc 	cmp.w	r3, #408	@ 0x198
 8000392:	dbf0      	blt.n	8000376 <EXTI0Init+0x56>
	}
	//Báo ARM vector table đã được offset lên RAM
	uint32_t* VTOR = (uint32_t*)0xE000ED08;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <EXTI0Init+0xa8>)
 8000396:	60bb      	str	r3, [r7, #8]
	*VTOR = 0x20000000;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800039e:	601a      	str	r2, [r3, #0]
	//
	int* ptr;
	ptr= (int*)0x20000058;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <EXTI0Init+0xac>)
 80003a2:	607b      	str	r3, [r7, #4]
	*ptr = (int)function;
 80003a4:	4a0a      	ldr	r2, [pc, #40]	@ (80003d0 <EXTI0Init+0xb0>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]


}
 80003aa:	bf00      	nop
 80003ac:	372c      	adds	r7, #44	@ 0x2c
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40013c08 	.word	0x40013c08
 80003bc:	40013c0c 	.word	0x40013c0c
 80003c0:	40013c00 	.word	0x40013c00
 80003c4:	e000e100 	.word	0xe000e100
 80003c8:	e000ed08 	.word	0xe000ed08
 80003cc:	20000058 	.word	0x20000058
 80003d0:	080002fd 	.word	0x080002fd

080003d4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
	if(ButtonState())
 80003da:	f7ff ff7b 	bl	80002d4 <ButtonState>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d004      	beq.n	80003ee <EXTI0_IRQHandler+0x1a>
		LedCtrl(LED_RED, 1);
 80003e4:	2101      	movs	r1, #1
 80003e6:	200e      	movs	r0, #14
 80003e8:	f7ff ff4c 	bl	8000284 <LedCtrl>
 80003ec:	e003      	b.n	80003f6 <EXTI0_IRQHandler+0x22>
	else
		LedCtrl(LED_RED, 0);
 80003ee:	2100      	movs	r1, #0
 80003f0:	200e      	movs	r0, #14
 80003f2:	f7ff ff47 	bl	8000284 <LedCtrl>

	//clear interrupt flag
	uint32_t* EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <EXTI0_IRQHandler+0x3c>)
 80003f8:	607b      	str	r3, [r7, #4]
	*EXTI_PR |= (1<<0);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f043 0201 	orr.w	r2, r3, #1
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40013c14 	.word	0x40013c14

08000414 <UART_Init>:

#define UART1_BASE_ADDR	0x40011000
#define GPIOB_BASE_ADDR	0x40020400
void UART_Init()
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	@ 0x24
 8000418:	af00      	add	r7, sp, #0
	/* 	CONFIG GPIOB
		set PB6 as UART1_Tx, PB7 as UART1_Rx
		PB6 alternate function 07
		PB7 alternate function 07
	*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	2300      	movs	r3, #0
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	4b2d      	ldr	r3, [pc, #180]	@ (80004d4 <UART_Init+0xc0>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a2c      	ldr	r2, [pc, #176]	@ (80004d4 <UART_Init+0xc0>)
 8000424:	f043 0302 	orr.w	r3, r3, #2
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <UART_Init+0xc0>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 8000436:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <UART_Init+0xc4>)
 8000438:	61fb      	str	r3, [r7, #28]
	*GPIOB_MODER &= ~(0b1111 << 12);
 800043a:	69fb      	ldr	r3, [r7, #28]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << 12) | (0b10 << 14);
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	601a      	str	r2, [r3, #0]

	uint32_t* GPIOB_AFLR = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 8000452:	4b22      	ldr	r3, [pc, #136]	@ (80004dc <UART_Init+0xc8>)
 8000454:	61bb      	str	r3, [r7, #24]
	*GPIOB_AFLR &= ~(0xff << 24);
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	601a      	str	r2, [r3, #0]
	*GPIOB_AFLR |= (0b0111 << 24) | (0b0111 << 28);
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	601a      	str	r2, [r3, #0]
			+ parity: even		-> CR1 bit 10 PCE = 1 (parity control enable)
						-> CR1 bit 9  PS = 0 (parity selection)
		- Enable transmitter, receiver	-> CR1 bit 3 TE, bit 2 RE
		- Enable UART			-> CR1 bit 13 UE
	*/
	__HAL_RCC_USART1_CLK_ENABLE();	// 16Mhz
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <UART_Init+0xc0>)
 8000474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000476:	4a17      	ldr	r2, [pc, #92]	@ (80004d4 <UART_Init+0xc0>)
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	6453      	str	r3, [r2, #68]	@ 0x44
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <UART_Init+0xc0>)
 8000480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000482:	f003 0310 	and.w	r3, r3, #16
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
	uint32_t* BRR = (uint32_t*)(UART1_BASE_ADDR + 0x08);
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <UART_Init+0xcc>)
 800048c:	617b      	str	r3, [r7, #20]
	*BRR = (104 << 4) | (3 << 0);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f240 6283 	movw	r2, #1667	@ 0x683
 8000494:	601a      	str	r2, [r3, #0]

	uint32_t* CR1 = (uint32_t*)(UART1_BASE_ADDR + 0x0C);
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <UART_Init+0xd0>)
 8000498:	613b      	str	r3, [r7, #16]
	*CR1 |= (1 << 12) | (1 << 10) | (1 << 3) | (1 << 2) | (1 << 13);
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f443 5350 	orr.w	r3, r3, #13312	@ 0x3400
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	693a      	ldr	r2, [r7, #16]
 80004a8:	6013      	str	r3, [r2, #0]

	/* enable interrupt */
	*CR1 |= (1 << 5);
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f043 0220 	orr.w	r2, r3, #32
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	601a      	str	r2, [r3, #0]
	uint32_t* NVIC_ISER1 = (uint32_t*)0xE000E104;
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <UART_Init+0xd4>)
 80004b8:	60fb      	str	r3, [r7, #12]
	*NVIC_ISER1 |= 1<<5;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f043 0220 	orr.w	r2, r3, #32
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	3724      	adds	r7, #36	@ 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020420 	.word	0x40020420
 80004e0:	40011008 	.word	0x40011008
 80004e4:	4001100c 	.word	0x4001100c
 80004e8:	e000e104 	.word	0xe000e104

080004ec <UART_Transmit>:



void UART_Transmit(uint8_t data)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	uint32_t* DR = (uint32_t*)(UART1_BASE_ADDR + 0x04);
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <UART_Transmit+0x44>)
 80004f8:	60fb      	str	r3, [r7, #12]
	uint32_t* SR = (uint32_t*)(UART1_BASE_ADDR + 0x00);
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <UART_Transmit+0x48>)
 80004fc:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7) & 1) == 0);
 80004fe:	bf00      	nop
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <UART_Transmit+0x14>
	*DR = data;
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6) & 1) == 0);
 8000512:	bf00      	nop
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f9      	beq.n	8000514 <UART_Transmit+0x28>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40011004 	.word	0x40011004
 8000534:	40011000 	.word	0x40011000

08000538 <UART_Print_Log>:

void UART_Print_Log(char* msg)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff fe49 	bl	80001d8 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < msg_len; i++)
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e009      	b.n	8000564 <UART_Print_Log+0x2c>
	{
		UART_Transmit((uint8_t)msg[i]);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffc7 	bl	80004ec <UART_Transmit>
	for(int i = 0; i < msg_len; i++)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf1      	blt.n	8000550 <UART_Print_Log+0x18>
	}
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <UART_Receive>:

char UART_Receive()
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
	uint32_t* DR = (uint32_t*)(UART1_BASE_ADDR + 0x04);
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <UART_Receive+0x30>)
 8000580:	60fb      	str	r3, [r7, #12]
	uint32_t* SR = (uint32_t*)(UART1_BASE_ADDR + 0x00);
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <UART_Receive+0x34>)
 8000584:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 5) & 1) == 0);
 8000586:	bf00      	nop
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0f9      	beq.n	8000588 <UART_Receive+0x10>
	char data = *DR;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	71fb      	strb	r3, [r7, #7]
	return data;
 800059a:	79fb      	ldrb	r3, [r7, #7]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40011004 	.word	0x40011004
 80005ac:	40011000 	.word	0x40011000

080005b0 <USART1_IRQHandler>:

char storeData[100];
int idx;

void USART1_IRQHandler()
{
 80005b0:	b598      	push	{r3, r4, r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	storeData[idx++] = UART_Receive();
 80005b4:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <USART1_IRQHandler+0xbc>)
 80005b6:	681c      	ldr	r4, [r3, #0]
 80005b8:	1c63      	adds	r3, r4, #1
 80005ba:	4a2c      	ldr	r2, [pc, #176]	@ (800066c <USART1_IRQHandler+0xbc>)
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	f7ff ffdb 	bl	8000578 <UART_Receive>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <USART1_IRQHandler+0xc0>)
 80005c8:	551a      	strb	r2, [r3, r4]
	if(strstr(storeData, "\n"))
 80005ca:	210a      	movs	r1, #10
 80005cc:	4828      	ldr	r0, [pc, #160]	@ (8000670 <USART1_IRQHandler+0xc0>)
 80005ce:	f000 fbf2 	bl	8000db6 <strchr>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d046      	beq.n	8000666 <USART1_IRQHandler+0xb6>
	{
		if(strstr(storeData, "blue led on"))
 80005d8:	4926      	ldr	r1, [pc, #152]	@ (8000674 <USART1_IRQHandler+0xc4>)
 80005da:	4825      	ldr	r0, [pc, #148]	@ (8000670 <USART1_IRQHandler+0xc0>)
 80005dc:	f000 fbf8 	bl	8000dd0 <strstr>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <USART1_IRQHandler+0x46>
		{
			LedCtrl(LED_BLUE, 1);
 80005e6:	2101      	movs	r1, #1
 80005e8:	200f      	movs	r0, #15
 80005ea:	f7ff fe4b 	bl	8000284 <LedCtrl>
			UART_Print_Log("--> ON LED OK\n");
 80005ee:	4822      	ldr	r0, [pc, #136]	@ (8000678 <USART1_IRQHandler+0xc8>)
 80005f0:	f7ff ffa2 	bl	8000538 <UART_Print_Log>
 80005f4:	e02f      	b.n	8000656 <USART1_IRQHandler+0xa6>
		}
		else if(strstr(storeData, "blue led off"))
 80005f6:	4921      	ldr	r1, [pc, #132]	@ (800067c <USART1_IRQHandler+0xcc>)
 80005f8:	481d      	ldr	r0, [pc, #116]	@ (8000670 <USART1_IRQHandler+0xc0>)
 80005fa:	f000 fbe9 	bl	8000dd0 <strstr>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d007      	beq.n	8000614 <USART1_IRQHandler+0x64>
		{
			LedCtrl(LED_BLUE, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	200f      	movs	r0, #15
 8000608:	f7ff fe3c 	bl	8000284 <LedCtrl>
			UART_Print_Log("--> OFF LED OK\n");
 800060c:	481c      	ldr	r0, [pc, #112]	@ (8000680 <USART1_IRQHandler+0xd0>)
 800060e:	f7ff ff93 	bl	8000538 <UART_Print_Log>
 8000612:	e020      	b.n	8000656 <USART1_IRQHandler+0xa6>
		}
		else if(strstr(storeData, "red led on"))
 8000614:	491b      	ldr	r1, [pc, #108]	@ (8000684 <USART1_IRQHandler+0xd4>)
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <USART1_IRQHandler+0xc0>)
 8000618:	f000 fbda 	bl	8000dd0 <strstr>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <USART1_IRQHandler+0x82>
		{
			LedCtrl(LED_RED, 1);
 8000622:	2101      	movs	r1, #1
 8000624:	200e      	movs	r0, #14
 8000626:	f7ff fe2d 	bl	8000284 <LedCtrl>
			UART_Print_Log("--> OFF LED OK\n");
 800062a:	4815      	ldr	r0, [pc, #84]	@ (8000680 <USART1_IRQHandler+0xd0>)
 800062c:	f7ff ff84 	bl	8000538 <UART_Print_Log>
 8000630:	e011      	b.n	8000656 <USART1_IRQHandler+0xa6>
		}
		else if(strstr(storeData, "red led off"))
 8000632:	4915      	ldr	r1, [pc, #84]	@ (8000688 <USART1_IRQHandler+0xd8>)
 8000634:	480e      	ldr	r0, [pc, #56]	@ (8000670 <USART1_IRQHandler+0xc0>)
 8000636:	f000 fbcb 	bl	8000dd0 <strstr>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d007      	beq.n	8000650 <USART1_IRQHandler+0xa0>
		{
			LedCtrl(LED_RED, 0);
 8000640:	2100      	movs	r1, #0
 8000642:	200e      	movs	r0, #14
 8000644:	f7ff fe1e 	bl	8000284 <LedCtrl>
			UART_Print_Log("--> OFF LED OK\n");
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <USART1_IRQHandler+0xd0>)
 800064a:	f7ff ff75 	bl	8000538 <UART_Print_Log>
 800064e:	e002      	b.n	8000656 <USART1_IRQHandler+0xa6>
		}
		else
		{
			UART_Print_Log("--> COMMAND NOT FOUND\n");
 8000650:	480e      	ldr	r0, [pc, #56]	@ (800068c <USART1_IRQHandler+0xdc>)
 8000652:	f7ff ff71 	bl	8000538 <UART_Print_Log>
		}

		memset(storeData, 0,  sizeof(storeData));
 8000656:	2264      	movs	r2, #100	@ 0x64
 8000658:	2100      	movs	r1, #0
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <USART1_IRQHandler+0xc0>)
 800065c:	f000 fba3 	bl	8000da6 <memset>
		idx = 0;
 8000660:	4b02      	ldr	r3, [pc, #8]	@ (800066c <USART1_IRQHandler+0xbc>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
	}
}
 8000666:	bf00      	nop
 8000668:	bd98      	pop	{r3, r4, r7, pc}
 800066a:	bf00      	nop
 800066c:	2000008c 	.word	0x2000008c
 8000670:	20000028 	.word	0x20000028
 8000674:	08000e5c 	.word	0x08000e5c
 8000678:	08000e68 	.word	0x08000e68
 800067c:	08000e78 	.word	0x08000e78
 8000680:	08000e88 	.word	0x08000e88
 8000684:	08000e98 	.word	0x08000e98
 8000688:	08000ea4 	.word	0x08000ea4
 800068c:	08000eb0 	.word	0x08000eb0

08000690 <SPI_Init>:

//SPI
#define SPI_BASE_ADDR 0x40013000
#define GPIOE_BASE_ADDR 0x40021000
void SPI_Init()
{
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	@ 0x24
 8000694:	af00      	add	r7, sp, #0
	// map chân PA5 - SPI_SCK, PA6 - MOSI, PA7 - MISO
	// PE3 set as GPIO_OUTPIT
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b62      	ldr	r3, [pc, #392]	@ (8000824 <SPI_Init+0x194>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a61      	ldr	r2, [pc, #388]	@ (8000824 <SPI_Init+0x194>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000824 <SPI_Init+0x194>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
	uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 80006b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000828 <SPI_Init+0x198>)
 80006b4:	61fb      	str	r3, [r7, #28]
	*GPIOA_MODER &=~ (0b11 << 10);
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 10); //PA5
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	601a      	str	r2, [r3, #0]

	*GPIOA_MODER &=~ (0b11 << 12);
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 12); // PA6
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	601a      	str	r2, [r3, #0]

	*GPIOA_MODER &=~ (0b11 << 14);
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 14); // PA7
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	601a      	str	r2, [r3, #0]

// set alternate function
	uint32_t* GPIOA_AFRL = (uint32_t*)(GPIOA_BASE_ADDR + 0x20);
 80006fe:	4b4b      	ldr	r3, [pc, #300]	@ (800082c <SPI_Init+0x19c>)
 8000700:	61bb      	str	r3, [r7, #24]
	*GPIOA_AFRL &=~ (0b1111 << 20); //PA5 CLK
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |= (0b0101 << 20);
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	601a      	str	r2, [r3, #0]

	*GPIOA_AFRL &=~ (0b1111 << 24); //PA6 MISO
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |= (0b0101 << 24);
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 62a0 	orr.w	r2, r3, #83886080	@ 0x5000000
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	601a      	str	r2, [r3, #0]

	*GPIOA_AFRL &=~ (0b1111 << 28); //PA7 MOSI
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |= (0b0101 << 28);
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	601a      	str	r2, [r3, #0]

	// PE3 set as GPIO_OUTPUT
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b35      	ldr	r3, [pc, #212]	@ (8000824 <SPI_Init+0x194>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a34      	ldr	r2, [pc, #208]	@ (8000824 <SPI_Init+0x194>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <SPI_Init+0x194>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOE_MODER = (uint32_t*)(GPIOE_BASE_ADDR + 0x00);
 8000766:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <SPI_Init+0x1a0>)
 8000768:	617b      	str	r3, [r7, #20]
	*GPIOE_MODER &=~ (0b1111 << 6); // PE3 Output
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f423 7270 	bic.w	r2, r3, #960	@ 0x3c0
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	601a      	str	r2, [r3, #0]
	*GPIOE_MODER |= (0b01 << 6);
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	601a      	str	r2, [r3, #0]

//SPI Configuration
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <SPI_Init+0x194>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a26      	ldr	r2, [pc, #152]	@ (8000824 <SPI_Init+0x194>)
 800078c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
 8000792:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <SPI_Init+0x194>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

	// Configuration STM32 Master Mode
	uint16_t* SPI_CR1 = (uint16_t*)(SPI_BASE_ADDR + 0x00);
 800079e:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <SPI_Init+0x1a4>)
 80007a0:	613b      	str	r3, [r7, #16]
	*SPI_CR1 &=~ (01111 << 2);
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	f423 6312 	bic.w	r3, r3, #2336	@ 0x920
 80007aa:	f023 0304 	bic.w	r3, r3, #4
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= (1 << 2);
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b29a      	uxth	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	801a      	strh	r2, [r3, #0]

	// Use software slave management
	*SPI_CR1 &=~ (0b1111 << 9);
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= (1 << 9) | (1 << 9);
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007d8:	b29a      	uxth	r2, r3
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	801a      	strh	r2, [r3, #0]

	//Set Clock
	*SPI_CR1 &=~ (0b1111 << 3);
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= (0b011 << 3); //1MHz
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	f043 0318 	orr.w	r3, r3, #24
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	801a      	strh	r2, [r3, #0]

	// ENABLE SPI
	*SPI_CR1 &=~ (0b1111 << 6);
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8000802:	b29a      	uxth	r2, r3
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= (1 << 6);
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000810:	b29a      	uxth	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	801a      	strh	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	3724      	adds	r7, #36	@ 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020020 	.word	0x40020020
 8000830:	40021000 	.word	0x40021000
 8000834:	40013000 	.word	0x40013000

08000838 <Read_SPI>:

char Read_SPI (char reg_add_slave)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	// Set PE3 (CS) to low -> active slave
	uint32_t* GPIOE_ODR = (uint32_t*)(GPIOE_BASE_ADDR + 0x14); // ODR: output data register
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <Read_SPI+0xec>)
 8000844:	617b      	str	r3, [r7, #20]
	*GPIOE_ODR &=~ (1 << 3);
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 0208 	bic.w	r2, r3, #8
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	601a      	str	r2, [r3, #0]

	uint16_t* SPI_DR = (uint16_t*)(SPI_BASE_ADDR + 0x0C);
 8000852:	4b35      	ldr	r3, [pc, #212]	@ (8000928 <Read_SPI+0xf0>)
 8000854:	613b      	str	r3, [r7, #16]
	uint16_t* SPI_SR = (uint16_t*)(SPI_BASE_ADDR + 0x08);
 8000856:	4b35      	ldr	r3, [pc, #212]	@ (800092c <Read_SPI+0xf4>)
 8000858:	60fb      	str	r3, [r7, #12]

	//BSY: SPI is busy in communication or TX buffer is not empty
	while (((*SPI_SR >> 7) & 1) == 1); //Bit BSY: 1
 800085a:	bf00      	nop
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	09db      	lsrs	r3, r3, #7
 8000862:	b29b      	uxth	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f7      	bne.n	800085c <Read_SPI+0x24>
	*SPI_DR |= reg_add_slave | (1 << 7);
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	4313      	orrs	r3, r2
 800087a:	b29a      	uxth	r2, r3
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	801a      	strh	r2, [r3, #0]
	while (((*SPI_SR >> 1) & 1) == 0);
 8000880:	bf00      	nop
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f7      	beq.n	8000882 <Read_SPI+0x4a>
	while (((*SPI_SR >> 7) & 1) == 1);
 8000892:	bf00      	nop
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	09db      	lsrs	r3, r3, #7
 800089a:	b29b      	uxth	r3, r3
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f7      	bne.n	8000894 <Read_SPI+0x5c>

	//Read DR -> Clear Garbage data sử dụng RXNE
	while (((*SPI_SR >> 0) & 1) == 0); // RXNE
 80008a4:	bf00      	nop
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f9      	beq.n	80008a6 <Read_SPI+0x6e>
	char data = *SPI_DR;
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	72fb      	strb	r3, [r7, #11]

	while (((*SPI_SR >> 1) & 1) == 0);
 80008b8:	bf00      	nop
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f7      	beq.n	80008ba <Read_SPI+0x82>
	*SPI_DR = 0xFF;
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	22ff      	movs	r2, #255	@ 0xff
 80008ce:	801a      	strh	r2, [r3, #0]
	while (((*SPI_SR >> 1) & 1) == 0);
 80008d0:	bf00      	nop
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	085b      	lsrs	r3, r3, #1
 80008d8:	b29b      	uxth	r3, r3
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f7      	beq.n	80008d2 <Read_SPI+0x9a>
	while (((*SPI_SR >> 7) & 1) == 1);
 80008e2:	bf00      	nop
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	09db      	lsrs	r3, r3, #7
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f7      	bne.n	80008e4 <Read_SPI+0xac>

	while (((*SPI_SR >> 0) & 1) == 0);
 80008f4:	bf00      	nop
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <Read_SPI+0xbe>
	data = *SPI_DR;
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	72fb      	strb	r3, [r7, #11]

	//inactive Slave
	*GPIOE_ODR |= (1 << 3);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f043 0208 	orr.w	r2, r3, #8
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	601a      	str	r2, [r3, #0]

	return data;
 8000914:	7afb      	ldrb	r3, [r7, #11]

}
 8000916:	4618      	mov	r0, r3
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021014 	.word	0x40021014
 8000928:	4001300c 	.word	0x4001300c
 800092c:	40013008 	.word	0x40013008

08000930 <main>:
	//inactive Slave
	*GPIOE_ODR |= (1 << 3);
}

int main()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	HAL_Init();
 8000936:	f000 f8bb 	bl	8000ab0 <HAL_Init>
	LedInit();
 800093a:	f7ff fc55 	bl	80001e8 <LedInit>
	ButtonInit();
 800093e:	f7ff fc7d 	bl	800023c <ButtonInit>
	EXTI0Init();
 8000942:	f7ff fced 	bl	8000320 <EXTI0Init>
	UART_Init();
 8000946:	f7ff fd65 	bl	8000414 <UART_Init>
	SPI_Init();
 800094a:	f7ff fea1 	bl	8000690 <SPI_Init>
	char id = Read_SPI(0x0f);
 800094e:	200f      	movs	r0, #15
 8000950:	f7ff ff72 	bl	8000838 <Read_SPI>
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
	id = Read_SPI(0x20);
 8000958:	2020      	movs	r0, #32
 800095a:	f7ff ff6d 	bl	8000838 <Read_SPI>
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		LedCtrl(LED_BLUE, 1);
 8000962:	2101      	movs	r1, #1
 8000964:	200f      	movs	r0, #15
 8000966:	f7ff fc8d 	bl	8000284 <LedCtrl>
		HAL_Delay(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800096e:	f000 f911 	bl	8000b94 <HAL_Delay>
		LedCtrl(LED_BLUE, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f7ff fc85 	bl	8000284 <LedCtrl>
		HAL_Delay(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097e:	f000 f909 	bl	8000b94 <HAL_Delay>
		LedCtrl(LED_BLUE, 1);
 8000982:	bf00      	nop
 8000984:	e7ed      	b.n	8000962 <main+0x32>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	6453      	str	r3, [r2, #68]	@ 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2e:	f000 f891 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a60:	f7ff ffea 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f000 f9b7 	bl	8000dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff ff4f 	bl	8000930 <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa0:	08000ed8 	.word	0x08000ed8
  ldr r2, =_sbss
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa8:	20000094 	.word	0x20000094

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <HAL_Init+0x40>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <HAL_Init+0x40>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	@ (8000af0 <HAL_Init+0x40>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f931 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff ff50 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f93b 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f911 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	@ (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000090 	.word	0x20000090

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000090 	.word	0x20000090

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff47 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff5c 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <memset>:
 8000da6:	4402      	add	r2, r0
 8000da8:	4603      	mov	r3, r0
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d100      	bne.n	8000db0 <memset+0xa>
 8000dae:	4770      	bx	lr
 8000db0:	f803 1b01 	strb.w	r1, [r3], #1
 8000db4:	e7f9      	b.n	8000daa <memset+0x4>

08000db6 <strchr>:
 8000db6:	b2c9      	uxtb	r1, r1
 8000db8:	4603      	mov	r3, r0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dc0:	b112      	cbz	r2, 8000dc8 <strchr+0x12>
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	d1f9      	bne.n	8000dba <strchr+0x4>
 8000dc6:	4770      	bx	lr
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf18      	it	ne
 8000dcc:	2000      	movne	r0, #0
 8000dce:	4770      	bx	lr

08000dd0 <strstr>:
 8000dd0:	780a      	ldrb	r2, [r1, #0]
 8000dd2:	b570      	push	{r4, r5, r6, lr}
 8000dd4:	b96a      	cbnz	r2, 8000df2 <strstr+0x22>
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d109      	bne.n	8000df0 <strstr+0x20>
 8000ddc:	460c      	mov	r4, r1
 8000dde:	4605      	mov	r5, r0
 8000de0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f6      	beq.n	8000dd6 <strstr+0x6>
 8000de8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000dec:	429e      	cmp	r6, r3
 8000dee:	d0f7      	beq.n	8000de0 <strstr+0x10>
 8000df0:	3001      	adds	r0, #1
 8000df2:	7803      	ldrb	r3, [r0, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1ef      	bne.n	8000dd8 <strstr+0x8>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e7ec      	b.n	8000dd6 <strstr+0x6>

08000dfc <__libc_init_array>:
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8000e34 <__libc_init_array+0x38>)
 8000e00:	4c0d      	ldr	r4, [pc, #52]	@ (8000e38 <__libc_init_array+0x3c>)
 8000e02:	1b64      	subs	r4, r4, r5
 8000e04:	10a4      	asrs	r4, r4, #2
 8000e06:	2600      	movs	r6, #0
 8000e08:	42a6      	cmp	r6, r4
 8000e0a:	d109      	bne.n	8000e20 <__libc_init_array+0x24>
 8000e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8000e3c <__libc_init_array+0x40>)
 8000e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8000e40 <__libc_init_array+0x44>)
 8000e10:	f000 f818 	bl	8000e44 <_init>
 8000e14:	1b64      	subs	r4, r4, r5
 8000e16:	10a4      	asrs	r4, r4, #2
 8000e18:	2600      	movs	r6, #0
 8000e1a:	42a6      	cmp	r6, r4
 8000e1c:	d105      	bne.n	8000e2a <__libc_init_array+0x2e>
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
 8000e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e24:	4798      	blx	r3
 8000e26:	3601      	adds	r6, #1
 8000e28:	e7ee      	b.n	8000e08 <__libc_init_array+0xc>
 8000e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2e:	4798      	blx	r3
 8000e30:	3601      	adds	r6, #1
 8000e32:	e7f2      	b.n	8000e1a <__libc_init_array+0x1e>
 8000e34:	08000ed0 	.word	0x08000ed0
 8000e38:	08000ed0 	.word	0x08000ed0
 8000e3c:	08000ed0 	.word	0x08000ed0
 8000e40:	08000ed4 	.word	0x08000ed4

08000e44 <_init>:
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	bf00      	nop
 8000e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4a:	bc08      	pop	{r3}
 8000e4c:	469e      	mov	lr, r3
 8000e4e:	4770      	bx	lr

08000e50 <_fini>:
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	bf00      	nop
 8000e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e56:	bc08      	pop	{r3}
 8000e58:	469e      	mov	lr, r3
 8000e5a:	4770      	bx	lr
